#! /usr/bin/env python
# @Created by Jose Fernandez

from lxml import etree
import os
import getopt
import sys
import percolatorUtils as per
import generalUtils as utils
import hit as hit

def usage():
    print "this script generates a tab delimited output of unique peptides probabilities generated by prosolve from a percolator pout.xml file and a prosolve tab delimited file containing peptides"
    print "Usage : parseProsolvePeptides.py <pout.xml> <peptides_prosolve.txt> [-o, --output <output.txt>] [d, --prefix <prefix>] [-h, --help] [-v, --verbose]"
    print "--output : the name of the file that will contain the tab delimited list of peptides and probabilities"
    print "--prefix : the decoy prefix used to identify decoys"
    
def main(argv):
    if( len(argv) < 2):
        sys.stderr.write("Error: Number of arguments incorrect\n")
        usage()
        sys.exit()
    else:
        OutputFile = "output.txt"
        verbose = False
        decoy_pattern = "random"
        try:
            opts, args = getopt.getopt(sys.argv[3:], "o:d:hv", ["output=","prefix=", "help", "verbose"])
        except getopt.GetoptError, err:
            # print help information and exit:
            print str(err) # will print something like "option -a not recognized"
            usage()
            sys.exit(2)
        
        for o, a in opts:
            if o == "-v":
                verbose = True
            elif o in ("-h", "--help"):
                usage()
                sys.exit()
            elif o in ("-o", "--output"):
                OutputFile = a
            elif o in ("-d", "--prefix"):
                decoy_pattern = a
            else:
                assert False, "unhandled option"
        
        if(os.path.isfile(argv[0])):
            infile = argv[0]
            infile2 = argv[1]
        else:
            sys.stderr.write("Error: XML file not found\n")
            sys.exit()
                
        parser = etree.XMLParser(ns_clean=False, huge_tree=True)
        try:
            tree = etree.parse(infile,parser)
        except Exception, inst:
            sys.stderr.write("Unexpected error opening %s: %s\n" % (infile, inst))
            sys.exit()
             
        if(verbose):
            print "Reading " + str(argv[0])
            print "Reading " + str(argv[1])   
                         
        elems = tree.getroot()
        percolatorPeptides = per.getPeptides(elems)
        uniquePeptides = set([pept.peptide for pept in percolatorPeptides])
        prosolvePeptides = list()
        f = open(infile2).readlines()
        #(self,isdecoy=False,pep=0.0,q=0.0,empq=0.0,p=0.0,sequence="",score=0.0,psms=[],proteins=[]):
        for line in f:
            words = line.split()
            prob = float(words[0])
            sequence = str(words[1])
            proteins = list(words[2:])
            isdecoy = False
            if(str(proteins[0]).find(decoy_pattern) != -1 ):
                isdecoy = True
            peptide = hit.Peptide(isdecoy,float(1 - prob),float(0.0),float(0.0),float(0.0),str(sequence),float(prob),[],proteins)
            if(sequence in uniquePeptides):
                prosolvePeptides.append(peptide)

        if(len(prosolvePeptides) > 0 and len(percolatorPeptides) > 0):
            if(verbose):
                print "writing in " + str(OutputFile)   
            utils.writePeptides(prosolvePeptides,"peptides_prosolve_" + OutputFile)
        else:
            sys.stderr.write("the input file does not contain any information\n")
            sys.exit()
        
        if(verbose):
            print "Prosolve file parsed"
            
if __name__ == "__main__":
    main(sys.argv[1:]) 
    